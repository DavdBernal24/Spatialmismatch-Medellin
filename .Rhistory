Results_Private_2017 = read.csv("Output/Results/New_Ta_Private_2017.csv")
Results_Public_2017 = read.csv("Output/Results/New_Ta_Public_2017.csv")
Results_Private_2012 = read.csv("Output/Results/New_Ta_Private_2012.csv")
Results_Public_2012 = read.csv("Output/Results/New_Ta_Public_2012.csv")
#Renaming variables for the RBIND
names(Results_Private_2017) = c("k", "ta", "percap")
names(Results_Public_2017) = c("k", "ta", "percap")
names(Results_Private_2012) = c("k", "ta", "percap")
names(Results_Public_2012) = c("k", "ta", "percap")
# Year and Mode
Results_Private_2017$mode = "Private"
Results_Private_2017$year = 2017
Results_Private_2012$mode = "Private"
Results_Private_2012$year = 2012
Results_Public_2012$mode = "public"
Results_Public_2012$year = 2012
Results_Public_2017$mode = "public"
Results_Public_2017$year = 2017
#append
Results = rbind(Results_Private_2017, Results_Public_2017, Results_Private_2012, Results_Public_2012)
### Loading shares
shares = read_excel("Base/MedXcomunaGEIH2011_2017.Xlsx")
shares$year = ifelse(shares$year == 2011, 2012, shares$year)
shares$comuna = as.numeric(shares$comuna) #Numeric for the merge
#-------------------------------------------------------------#
#               2. Merging all Data                           #
#                                                             #
#-------------------------------------------------------------#
# Strata to main results.
Results = merge(Results, sit_zones, by.x = "k", by.y = "id_sit", all.x = TRUE)
#Renaming variables
Results = Results %>%
rename(comuna = Cod_Comuna,
SIT = k,
strata = estrt_s)
Results$comuna = as.numeric(Results$comuna)
##Adding the commune level data to the Results
Results = merge(Results, shares, by = c("year", "comuna"), all.x = TRUE)
##Dropping NAs
Results = Results[!is.na(Results$strata), ]
##Dropping the strata mode (This one is a commune level, we do not want it)
Results = subset(Results, select = -c(estrato_moda))
#####Saving
write.csv(Results, "Base/Heterogeneity.csv")
# Loading the Map with  SIT Zones and strata data
sit_zones = st_read("Data/Shapefiles/SITs_with_estrato/SITs_with_estrato.shp") #Maps for 2017
#---------------------------------------------------------------------------------
#   Proyecto: Mismatch
#
#   Nombre de script: merge_SITs_estrato
#   Autor de script:  Jorge Emilio Melendez
#
#
#
#---------------------------------------------------------------------------------
#   Output: x
#---------------------------------------------------------------------------------
#----------------
#    SETUP
#----------------
## Working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
rm(list = ls())
library(sf)
library(dplyr)
library(lwgeom)
#############################################
SITs <- read_sf("Data/Shapefiles/SITs_2017_cut/SITs_2017.shp")
barrios <- read_sf("Data/Shapefiles/Blocks/BARRIOS CON ESTRATO.shp")
# Validamos geometrias de barrios
barrios$geometry <- lwgeom::lwgeom_make_valid(barrios$geometry)
# nos quedamos con variables de interes de barrios
barrios <- barrios %>% dplyr::select(geometry, ESTRATO)
# Creamos id para SITs y dejamos solo id y geometría
SITs <- SITs %>% mutate(id_sit = rownames(SITs)) %>%
dplyr::select(id_sit, geometry)
# Nos quedamos solo con barrios válidos
barrios <- barrios[st_is_valid(barrios), ]
#----------------------
#    spatial merge
#----------------------
# nos aseguramos que estén en la misma proyección
barrios <- st_transform(barrios, st_crs(SITs))
barrios <- st_as_sf(barrios)
# hacemos el join espacial
barrios_in_SITs <- st_join(barrios, SITs, join = st_within)
#--------------------------------
#   Calculo de estrato por SIT
#--------------------------------
# filtramos barrios que no están dentro de una SIT
barrios_in_SITs <- barrios_in_SITs %>% filter(!is.na(id_sit))
# función robusta de moda
mode_function <- function(x) {
x <- na.omit(x)
if (length(x) == 0) return(NA)
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# ?????? Desactivar S2 para evitar errores con st_union() en summarise()
sf::sf_use_s2(FALSE)
# por SIT, sacamos la moda del estrato de los barrios
SIT_with_estrato <- barrios_in_SITs %>%
group_by(id_sit) %>%
summarise(estrato_sit = mode_function(ESTRATO)) %>%
ungroup()
# volver a activar S2 si lo deseas
sf::sf_use_s2(TRUE)
#cambiando
SIT_with_estrato = st_drop_geometry(SIT_with_estrato)
# unimos el resultado al shapefile original
SITs <- left_join(SITs, SIT_with_estrato, by = "id_sit")
# exportamos el shapefile con estrato
st_write(SITs, "Data/Shapefiles/SITs_with_estrato/SITs_with_estrato.shp", delete_dsn = TRUE)
### Project: Better or worse job accessibility? Understanding changes
#in spatial mismatch at the intra-urban level: evidence from  Medell?n, Colombia
### Authors: David Bernal; Gustavo Garcia; Jorge Perez
### Code created by : David Bernal
### Last modification :
### Modified by:
#### Purpose: This code creates a data frame of the accessibility
# measure accross different groups.
#Required libraries
## Data
library(sf) #Allows to manipulate spatial data
library(dplyr) #Allows to manipulate data
library(readr) #Read csv files
library(readxl) #Read excel files
# Library to work with spatial data
library(rgdal)
## Working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
rm(list = ls())
##############################################################################
#-------------------------------------------------------------#
#               1.Loading Data                                #
#                                                             #
#-------------------------------------------------------------#
# Loading the Map with  SIT Zones and strata data
sit_zones = st_read("Data/Shapefiles/SITs_with_estrato/SITs_with_estrato.shp") #Maps for 2017
#Loading communes shapefile
comunas = st_read("Data/Shapefiles/Communes/Comunas.shp")
comunas = subset(comunas, select = c(Cod_Comuna, geometry))
# Ensure both shapefiles have the same CRS
comunas = st_transform(comunas, st_crs(sit_zones))
##Getting the comuna ID
sit_zones <- st_intersection(sit_zones, comunas) %>%
mutate(intersection_area = st_area(.)) %>%
group_by(id_sit) %>%  # Assuming "ID_shp1" uniquely identifies shp1
slice_max(order_by = intersection_area, n = 1) %>%  # Keep the largest overlap
ungroup() %>%
select(id_sit, Cod_Comuna, estrt_s)  # Keep only relevant columns
sit_zones = st_drop_geometry(sit_zones)
##### Accessibility measures
Results_Private_2017 = read.csv("Output/Results/New_Ta_Private_2017.csv")
Results_Public_2017 = read.csv("Output/Results/New_Ta_Public_2017.csv")
Results_Private_2012 = read.csv("Output/Results/New_Ta_Private_2012.csv")
Results_Public_2012 = read.csv("Output/Results/New_Ta_Public_2012.csv")
#Renaming variables for the RBIND
names(Results_Private_2017) = c("k", "ta", "percap")
names(Results_Public_2017) = c("k", "ta", "percap")
names(Results_Private_2012) = c("k", "ta", "percap")
names(Results_Public_2012) = c("k", "ta", "percap")
# Year and Mode
Results_Private_2017$mode = "Private"
Results_Private_2017$year = 2017
Results_Private_2012$mode = "Private"
Results_Private_2012$year = 2012
Results_Public_2012$mode = "public"
Results_Public_2012$year = 2012
Results_Public_2017$mode = "public"
Results_Public_2017$year = 2017
#append
Results = rbind(Results_Private_2017, Results_Public_2017, Results_Private_2012, Results_Public_2012)
### Loading shares
shares = read_excel("Base/MedXcomunaGEIH2011_2017.Xlsx")
shares$year = ifelse(shares$year == 2011, 2012, shares$year)
shares$comuna = as.numeric(shares$comuna) #Numeric for the merge
#-------------------------------------------------------------#
#               2. Merging all Data                           #
#                                                             #
#-------------------------------------------------------------#
# Strata to main results.
Results = merge(Results, sit_zones, by.x = "k", by.y = "id_sit", all.x = TRUE)
#Renaming variables
Results = Results %>%
rename(comuna = Cod_Comuna,
SIT = k,
strata = estrt_s)
Results$comuna = as.numeric(Results$comuna)
##Adding the commune level data to the Results
Results = merge(Results, shares, by = c("year", "comuna"), all.x = TRUE)
##Dropping NAs
Results = Results[!is.na(Results$strata), ]
##Dropping the strata mode (This one is a commune level, we do not want it)
Results = subset(Results, select = -c(estrato_moda))
#####Saving
write.csv(Results, "Base/Heterogeneity.csv")
## Data
library(sf) #Allows to manipulate spatial data
library(dplyr) #Allows to manipulate data
library(readr) #Read csv files
library(readxl) #Read excel files
# Library to work with spatial data
library(rgdal)
## Working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
rm(list = ls())
##############################################################################
#-------------------------------------------------------------#
#               1.Loading Data                                #
#                                                             #
#-------------------------------------------------------------#
# Loading the Map with  SIT Zones and strata data
sit_zones = st_read("Data/Shapefiles/SITs_with_estrato/SITs_with_estrato.shp") #Maps for 2017
#Loading communes shapefile
comunas = st_read("Data/Shapefiles/Communes/Comunas.shp")
comunas = subset(comunas, select = c(Cod_Comuna, geometry))
# Ensure both shapefiles have the same CRS
comunas = st_transform(comunas, st_crs(sit_zones))
##Getting the comuna ID
sit_zones <- st_intersection(sit_zones, comunas) %>%
mutate(intersection_area = st_area(.)) %>%
group_by(id_sit) %>%  # Assuming "ID_shp1" uniquely identifies shp1
slice_max(order_by = intersection_area, n = 1) %>%  # Keep the largest overlap
ungroup() %>%
select(id_sit, Cod_Comuna, estrt_s)  # Keep only relevant columns
sit_zones = st_drop_geometry(sit_zones)
### Project: Better or worse job accessibility? Understanding changes
#in spatial mismatch at the intra-urban level: evidence from  Medell?n, Colombia
### Authors: David Bernal; Gustavo Garcia; Jorge Perez
### Code created by : David Bernal
### Last modification :
### Modified by:
#### Purpose: This code creates a data frame of the accessibility
# measure accross different groups.
#Required libraries
## Data
library(sf) #Allows to manipulate spatial data
library(dplyr) #Allows to manipulate data
library(readr) #Read csv files
library(readxl) #Read excel files
# Library to work with spatial data
library(rgdal)
## Working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
rm(list = ls())
##############################################################################
#-------------------------------------------------------------#
#               1.Loading Data                                #
#                                                             #
#-------------------------------------------------------------#
# Loading the Map with  SIT Zones and strata data
sit_zones = st_read("Data/Shapefiles/SITs_with_estrato/SITs_with_estrato.shp") #Maps for 2017
#Loading communes shapefile
comunas = st_read("Data/Shapefiles/Communes/Comunas.shp")
comunas = subset(comunas, select = c(Cod_Comuna, geometry))
# Ensure both shapefiles have the same CRS
comunas = st_transform(comunas, st_crs(sit_zones))
##Getting the comuna ID
sit_zones <- st_intersection(sit_zones, comunas) %>%
mutate(intersection_area = st_area(.)) %>%
group_by(id_sit) %>%  # Assuming "ID_shp1" uniquely identifies shp1
slice_max(order_by = intersection_area, n = 1) %>%  # Keep the largest overlap
ungroup() %>%
select(id_sit, Cod_Comuna, estrt_s)  # Keep only relevant columns
## Data
library(sf) #Allows to manipulate spatial data
library(dplyr) #Allows to manipulate data
library(readr) #Read csv files
library(readxl) #Read excel files
# Library to work with spatial data
library(rgdal)
## Working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
rm(list = ls())
##############################################################################
#-------------------------------------------------------------#
#               1.Loading Data                                #
#                                                             #
#-------------------------------------------------------------#
# Loading the Map with  SIT Zones and strata data
sit_zones = st_read("Data/Shapefiles/SITs_with_estrato/SITs_with_estrato.shp") #Maps for 2017
#Loading communes shapefile
comunas = st_read("Data/Shapefiles/Communes/Comunas.shp")
comunas = subset(comunas, select = c(Cod_Comuna, geometry))
# Ensure both shapefiles have the same CRS
comunas = st_transform(comunas, st_crs(sit_zones))
##Getting the comuna ID
sit_zones <- st_intersection(sit_zones, comunas) %>%
mutate(intersection_area = st_area(.)) %>%
group_by(id_sit) %>%  # Assuming "ID_shp1" uniquely identifies shp1
slice_max(order_by = intersection_area, n = 1) %>%  # Keep the largest overlap
ungroup() %>%
dplyr::select(id_sit, Cod_Comuna, estrt_s)(id_sit, Cod_Comuna, estrt_s)  # Keep only relevant columns
sit_zones = st_drop_geometry(sit_zones)
## Data
library(sf) #Allows to manipulate spatial data
library(dplyr) #Allows to manipulate data
library(readr) #Read csv files
library(readxl) #Read excel files
# Library to work with spatial data
library(rgdal)
## Working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
rm(list = ls())
##############################################################################
#-------------------------------------------------------------#
#               1.Loading Data                                #
#                                                             #
#-------------------------------------------------------------#
# Loading the Map with  SIT Zones and strata data
sit_zones = st_read("Data/Shapefiles/SITs_with_estrato/SITs_with_estrato.shp") #Maps for 2017
#Loading communes shapefile
comunas = st_read("Data/Shapefiles/Communes/Comunas.shp")
comunas = subset(comunas, select = c(Cod_Comuna, geometry))
# Ensure both shapefiles have the same CRS
comunas = st_transform(comunas, st_crs(sit_zones))
##Getting the comuna ID
sit_zones <- st_intersection(sit_zones, comunas) %>%
mutate(intersection_area = st_area(.)) %>%
group_by(id_sit) %>%  # Assuming "ID_shp1" uniquely identifies shp1
slice_max(order_by = intersection_area, n = 1) %>%  # Keep the largest overlap
ungroup() %>%
dplyr::select(id_sit, Cod_Comuna, estrt_s)  # Keep only relevant columns
sit_zones = st_drop_geometry(sit_zones)
##### Accessibility measures
Results_Private_2017 = read.csv("Output/Results/New_Ta_Private_2017.csv")
Results_Public_2017 = read.csv("Output/Results/New_Ta_Public_2017.csv")
Results_Private_2012 = read.csv("Output/Results/New_Ta_Private_2012.csv")
Results_Public_2012 = read.csv("Output/Results/New_Ta_Public_2012.csv")
#Renaming variables for the RBIND
names(Results_Private_2017) = c("k", "ta", "percap")
names(Results_Public_2017) = c("k", "ta", "percap")
names(Results_Private_2012) = c("k", "ta", "percap")
names(Results_Public_2012) = c("k", "ta", "percap")
# Year and Mode
Results_Private_2017$mode = "Private"
Results_Private_2017$year = 2017
Results_Private_2012$mode = "Private"
Results_Private_2012$year = 2012
Results_Public_2012$mode = "public"
Results_Public_2012$year = 2012
Results_Public_2017$mode = "public"
Results_Public_2017$year = 2017
#append
Results = rbind(Results_Private_2017, Results_Public_2017, Results_Private_2012, Results_Public_2012)
### Loading shares
shares = read_excel("Base/MedXcomunaGEIH2011_2017.Xlsx")
shares$year = ifelse(shares$year == 2011, 2012, shares$year)
shares$comuna = as.numeric(shares$comuna) #Numeric for the merge
#-------------------------------------------------------------#
#               2. Merging all Data                           #
#                                                             #
#-------------------------------------------------------------#
# Strata to main results.
Results = merge(Results, sit_zones, by.x = "k", by.y = "id_sit", all.x = TRUE)
#Renaming variables
Results = Results %>%
rename(comuna = Cod_Comuna,
SIT = k,
strata = estrt_s)
Results$comuna = as.numeric(Results$comuna)
##Adding the commune level data to the Results
Results = merge(Results, shares, by = c("year", "comuna"), all.x = TRUE)
##Dropping NAs
Results = Results[!is.na(Results$strata), ]
##Dropping the strata mode (This one is a commune level, we do not want it)
Results = subset(Results, select = -c(estrato_moda))
#####Saving
write.csv(Results, "Base/Heterogeneity.csv")
View(Results)
View(Results)
## Data
library(sf) #Allows to manipulate spatial data
library(dplyr) #Allows to manipulate data
library(readr) #Read csv files
library(readxl) #Read excel files
# Library to work with spatial data
library(rgdal)
## Working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
rm(list = ls())
##############################################################################
#-------------------------------------------------------------#
#               1.Loading Data                                #
#                                                             #
#-------------------------------------------------------------#
# Loading the Map with  SIT Zones and strata data
sit_zones = st_read("Data/Shapefiles/SITs_with_estrato/SITs_with_estrato.shp") #Maps for 2017
#Loading communes shapefile
comunas = st_read("Data/Shapefiles/Communes/Comunas.shp")
comunas = subset(comunas, select = c(Cod_Comuna, geometry))
# Ensure both shapefiles have the same CRS
comunas = st_transform(comunas, st_crs(sit_zones))
##Getting the comuna ID
sit_zones <- st_intersection(sit_zones, comunas) %>%
mutate(intersection_area = st_area(.)) %>%
group_by(id_sit) %>%  # Assuming "ID_shp1" uniquely identifies shp1
slice_max(order_by = intersection_area, n = 1) %>%  # Keep the largest overlap
ungroup() %>%
dplyr::select(id_sit, Cod_Comuna, estrt_s)  # Keep only relevant columns
sit_zones = st_drop_geometry(sit_zones)
##### Accessibility measures
Results_Private_2017 = read.csv("Output/Results/New_Ta_Private_2017.csv")
Results_Public_2017 = read.csv("Output/Results/New_Ta_Public_2017.csv")
Results_Private_2012 = read.csv("Output/Results/New_Ta_Private_2012.csv")
Results_Public_2012 = read.csv("Output/Results/New_Ta_Public_2012.csv")
#Renaming variables for the RBIND
names(Results_Private_2017) = c("k", "ta", "percap")
names(Results_Public_2017) = c("k", "ta", "percap")
names(Results_Private_2012) = c("k", "ta", "percap")
names(Results_Public_2012) = c("k", "ta", "percap")
# Year and Mode
Results_Private_2017$mode = "Private"
Results_Private_2017$year = 2017
Results_Private_2012$mode = "Private"
Results_Private_2012$year = 2012
Results_Public_2012$mode = "public"
Results_Public_2012$year = 2012
Results_Public_2017$mode = "public"
Results_Public_2017$year = 2017
#append
Results = rbind(Results_Private_2017, Results_Public_2017, Results_Private_2012, Results_Public_2012)
### Loading shares
shares = read_excel("Base/MedXcomunaGEIH2011_2017.Xlsx")
shares$year = ifelse(shares$year == 2011, 2012, shares$year)
shares$comuna = as.numeric(shares$comuna) #Numeric for the merge
#-------------------------------------------------------------#
#               2. Merging all Data                           #
#                                                             #
#-------------------------------------------------------------#
# Strata to main results.
Results = merge(Results, sit_zones, by.x = "k", by.y = "id_sit", all.x = TRUE)
#Renaming variables
Results = Results %>%
rename(comuna = Cod_Comuna,
SIT = k,
strata = estrt_s)
Results$comuna = as.numeric(Results$comuna)
##Adding the commune level data to the Results
Results = merge(Results, shares, by = c("year", "comuna"), all.x = TRUE)
##Dropping NAs
Results = Results[!is.na(Results$strata), ]
#####Saving
write.csv(Results, "Base/Heterogeneity.csv")
install.packages("RStata", dependencies = FALSE)
#51. Creates figures in Stata, hetereogenous effects of the measure
stata("51_Figure_B5,do", data.in = NULL, data.out = NULL, stata.echo = TRUE)
#52. Creates more figures in Stata, hetereogenous effects of the measure
stata("52_Figure_B6,do", data.in = NULL, data.out = NULL, stata.echo = TRUE)
############## STATA CODES
library(RStata)
options("RStata.StataPath" = "C:\Program Files\Stata18\StataMP-64.exe")  # adjust path to your system
options("RStata.StataVersion" = 18)
#Note: Please, also fix your directories on the do-files
#51. Creates figures in Stata, hetereogenous effects of the measure
stata("51_Figure_B5,do", data.in = NULL, data.out = NULL, stata.echo = TRUE)
#52. Creates more figures in Stata, hetereogenous effects of the measure
stata("52_Figure_B6,do", data.in = NULL, data.out = NULL, stata.echo = TRUE)
#51. Creates figures in Stata, hetereogenous effects of the measure
stata("51_Figure_B5,do", data.in = NULL, data.out = FALSE, stata.echo = TRUE)
#52. Creates more figures in Stata, hetereogenous effects of the measure
stata("52_Figure_B6,do", data.in = NULL, data.out = FALSE, stata.echo = TRUE)
options("RStata.StataPath" = "C:\Program Files\Stata18\StataMP-64.exe")  # adjust path to your system
options("RStata.StataVersion" = 18)
############## STATA CODES
library(RStata)
options("RStata.StataPath" = "C:/Program Files/Stata18/StataMP-64.exe")  # adjust path to your system
options("RStata.StataVersion" = 18)
#Note: Please, also fix your directories on the do-files
#51. Creates figures in Stata, hetereogenous effects of the measure
stata("51_Figure_B5,do", data.in = NULL, data.out = FALSE, stata.echo = TRUE)
#52. Creates more figures in Stata, hetereogenous effects of the measure
stata("52_Figure_B6,do", data.in = NULL, data.out = FALSE, stata.echo = TRUE)
getwd()
file.exists("52_Figure_B6.do")
#51. Creates figures in Stata, hetereogenous effects of the measure
stata("C:/Github_Folders/Spatial_Mismatch_Rep/51_Figure_B5,do", data.in = NULL, data.out = FALSE, stata.echo = TRUE)
options("RStata.StataPath" = "C:/Program Files/Stata18/StataMP-64.exe")  # adjust path to your system
options("RStata.StataVersion" = 18)
#Note: Please, also fix your directories on the do-files
#51. Creates figures in Stata, hetereogenous effects of the measure
stata("C:/Github_Folders/Spatial_Mismatch_Rep/51_Figure_B5,do", data.in = NULL, data.out = FALSE, stata.echo = TRUE)
writeLines("display 2 + 2", "test.do")
stata("C:/Github_Folders/Spatial_Mismatch_Rep/test.do", data.in = NULL, data.out = FALSE, stata.echo = TRUE)
writeLines("display 2 + 2", "C:/Github_Folders/Spatial_Mismatch_Rep/test.do")
stata("C:/Github_Folders/Spatial_Mismatch_Rep/test.do", data.in = NULL, data.out = FALSE, stata.echo = TRUE)
options("RStata.StataPath" = "C:/Program Files/Stata18/StataMP-64.exe")  # adjust path to your system
options("RStata.StataVersion" = 18)
############## STATA CODES
library(RStata)
options("RStata.StataPath" = "C:/ProgramData\Microsoft/Windows/Start Menu/Programs/Stata 18/StataMP 18 (64-bit).exe")  # adjust path to your system
options("RStata.StataVersion" = 18)
#Note: Please, also fix your directories on the do-files
#51. Creates figures in Stata, hetereogenous effects of the measure
stata("C:/Github_Folders/Spatial_Mismatch_Rep/51_Figure_B5,do", data.in = NULL, data.out = FALSE, stata.echo = TRUE)
writeLines("display 2 + 2", "C:/Github_Folders/Spatial_Mismatch_Rep/test.do")
stata("C:/Github_Folders/Spatial_Mismatch_Rep/test.do", data.in = NULL, data.out = FALSE, stata.echo = TRUE)
############## STATA CODES
library(RStata)
options("RStata.StataPath" = "C:/ProgramData/Microsoft/Windows/Start Menu/Programs/Stata 18/StataMP 18 (64-bit).exe")  # adjust path to your system
options("RStata.StataVersion" = 18)
#Note: Please, also fix your directories on the do-files
#51. Creates figures in Stata, hetereogenous effects of the measure
stata("C:/Github_Folders/Spatial_Mismatch_Rep/51_Figure_B5,do", data.in = NULL, data.out = FALSE, stata.echo = TRUE)
