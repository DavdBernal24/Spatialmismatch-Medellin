fix_cost, variable_cost, adjustment,ipc,
varname, percap_varname, ruta, filename, year, distance) {
## -----------------------------------------------------
## FIXING DATA
print("Fixing matrixes")
# Cleaning a little bit the SIT zones
sits_complete <- sit_zones
sits <- sit_zones[order(sit_zones@data$Name, -sit_zones@data$Shape_Area),]
sits <- sits[!duplicated(sits@data[c("Name")]),]
sits_order <- data.frame(sits$Name,sits$matrix_order)
colnames(sits_order) <- c("SIT","matrix_order")
# Filtering the SIT zones for which I have employment
sits_order <- sits_order[(sits_order$SIT %in% unique(emp$k)), ]
## Filtering times
colnames(travel_times) <- sit_zones$Name
travel_times <- travel_times[c(sits_order$matrix_order)]
travel_times$sit <- sit_zones$Name
travel_times <- travel_times[c(sits_order$matrix_order),]
print("Reshaping data wide to long")
## Travel times from wide to long
travel_times_long <- melt(travel_times)
colnames(travel_times_long) <- c('sito','sitd','time')
## Filtering distance matrix
travel_distances <- travel_distances[c(sits_order$matrix_order)]
travel_distances <- travel_distances[c(sits_order$matrix_order), ]
colnames(travel_distances) <- sits_order$SIT
travel_distances$sit <- sits_order$SIT
### Project: Better or worse job accessibility? Understanding changes
#in spatial mismatch at the intra-urban level: evidence from  Medellín, Colombia
### Authors: David Bernal; Gustavo Garcia; Jorge Perez
### Code created by : David Bernal
### Last modification :
### Modified by:
#### Purpose: This code computes the private transport accessibility measure for 2017
#Required libraries
### To load and transform the data
library(readr)
library(dplyr)
library(reshape2)
### For maps
library(rgdal)
library(spdep)
## Working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
rm(list = ls())
source("TA_Private_Function.R") # Function to compute the accessibility
##############################################################################
#-------------------------------------------------------------#
#        1. Loading Data                                      #
#                                                             #
#-------------------------------------------------------------#
## ----- Loading SIT map
sit_zones = readOGR("Data/Shapefiles/SITs_2017/SITzones2017.shp", layer = "SITzones2017") #Maps for 2017
sit_zones$matrix_order = c(1:nrow(sit_zones))
## ----- Employment
emp = read_csv("Base/emp2017.csv")
emp = emp[c("k","emp")]
## ----- Travel times
travel_times = read_csv("Base/bing_travel_duration_full.csv")
travel_times = travel_times/60 #Para que quede en minutos
## ----- Distance by roads
travel_distances = read_csv("Base/bing_distances_matrix.csv")
## costs (Average wage)
costs = read_csv("Base/costs_wmin.csv")
costs = costs[c("k","wmin2017")]
#-------------------------------------------------------------#
#        2. Some Transformations                              #
#                                                             #
#-------------------------------------------------------------#
## Distance to the borders
d = read_csv("Base/mean_distance_border.csv")
div = travel_distances/travel_times
div[is.na(div)] = 0
div[!is.finite(as.matrix(div))] = 0
prom = mean(as.matrix(div))
d$time = (d$distance/1000)/prom
d$time2 = ifelse(d$time==0,mean(d$time),d$time)
for (i in 1:nrow(sit_zones)){
travel_times[i,i] = d[i,3:3]
}
#-------------------------------------------------------------#
#        3. Computing TA 2017                                 #
#                                                             #
#-------------------------------------------------------------#
## Loading cost information from regressions
cost_parameters = read_csv("Base/reg_fix_var_cost.csv")
I = 1
i = 1
fix_cost = cost_parameters$fix_cost_2017[i]
variable_cost = cost_parameters$var_cost_2017[i]
adjustment = 1
ipc = 1
year = 2017
distance = cost_parameters$Distance[i]
# Cleaning a little bit the SIT zones
sits_complete <- sit_zones
sits <- sit_zones[order(sit_zones@data$Name, -sit_zones@data$Shape_Area),]
sits <- sits[!duplicated(sits@data[c("Name")]),]
sits_order <- data.frame(sits$Name,sits$matrix_order)
colnames(sits_order) <- c("SIT","matrix_order")
# Filtering the SIT zones for which I have employment
sits_order <- sits_order[(sits_order$SIT %in% unique(emp$k)), ]
## Filtering times
colnames(travel_times) <- sit_zones$Name
travel_times <- travel_times[c(sits_order$matrix_order)]
travel_times$sit <- sit_zones$Name
travel_times <- travel_times[c(sits_order$matrix_order),]
print("Reshaping data wide to long")
## Travel times from wide to long
travel_times_long <- melt(travel_times)
colnames(travel_times_long) <- c('sito','sitd','time')
View(travel_distances)
View(travel_times_long)
## Filtering distance matrix
travel_distances <- travel_distances[c(sits_order$matrix_order)]
travel_distances <- travel_distances[c(sits_order$matrix_order), ]
colnames(travel_distances) <- sits_order$SIT
travel_distances$sit <- sits_order$SIT
# Distances from wide to long
travel_dist_long <- melt(travel_distances)
colnames(travel_dist_long) <- c('sito','sitd','dist')
## Merging distances, costs and times
colnames(costs) <- c("k","wmin")
times_distances <- merge(travel_times_long, costs, by.x = 'sitd', by.y = 'k', all.x = T)
times_distances <- merge(times_distances, travel_dist_long,
by = c('sitd','sito'), all.x = T)
## Assigning costs
times_distances$transpcost = (fix_cost + (variable_cost * times_distances$dist))*adjustment
## Opportunity cost
times_distances$opcost = (((times_distances$time*times_distances$wmin) + times_distances$transpcost))*ipc
times_distances = merge(times_distances, emp, by.x = 'sitd', by.y = 'k', all.x = T)
print("Computing TA")
## Accessibility measure
times_distances$access = times_distances$emp/times_distances$opcost
times_distances = times_distances[!is.infinite(times_distances$access),]
ta_info = times_distances %>%
group_by(sito) %>%
summarise(ta = sum(access, na.rm = T))
ta_info$ta_percap = ta_info$ta/nrow(ta_info)
colnames(ta_info) = c('k',varname, percap_varname)
write.csv(times_distances, row.names = FALSE,
file = paste0(ruta, paste0(varname, "_components_dist"), distance, "_", year, ".csv"))
write.csv(ta_info, row.names = FALSE, file = paste0(ruta,filename))
View(ta_info)
### To load and transform the data
library(readr)
library(dplyr)
library(reshape2)
### For maps
library(rgdal)
library(spdep)
## Working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
rm(list = ls())
source("TA_Private_Function.R") # Function to compute the accessibility
##############################################################################
#-------------------------------------------------------------#
#        1. Loading Data                                      #
#                                                             #
#-------------------------------------------------------------#
## ----- Loading SIT map
sit_zones = readOGR("Data/Shapefiles/SITs_2017/SITzones2017.shp", layer = "SITzones2017") #Maps for 2017
sit_zones$matrix_order = c(1:nrow(sit_zones))
## ----- Employment
emp = read_csv("Base/emp2017.csv")
emp = emp[c("k","emp")]
## ----- Travel times
travel_times = read_csv("Base/bing_travel_duration_full.csv")
travel_times = travel_times/60 #Para que quede en minutos
## ----- Distance by roads
travel_distances = read_csv("Base/bing_distances_matrix.csv")
## costs (Average wage)
costs = read_csv("Base/costs_wmin.csv")
costs = costs[c("k","wmin2017")]
#-------------------------------------------------------------#
#        2. Some Transformations                              #
#                                                             #
#-------------------------------------------------------------#
## Distance to the borders
d = read_csv("Base/mean_distance_border.csv")
div = travel_distances/travel_times
div[is.na(div)] = 0
div[!is.finite(as.matrix(div))] = 0
prom = mean(as.matrix(div))
d$time = (d$distance/1000)/prom
d$time2 = ifelse(d$time==0,mean(d$time),d$time)
for (i in 1:nrow(sit_zones)){
travel_times[i,i] = d[i,3:3]
}
#-------------------------------------------------------------#
#        3. Computing TA 2017                                 #
#                                                             #
#-------------------------------------------------------------#
## Loading cost information from regressions
cost_parameters = read_csv("Base/reg_fix_var_cost.csv")
## Computing the measure for different distances
for(i in 1:nrow(cost_parameters)){
fix_cost = cost_parameters$fix_cost_2017[i]
variable_cost = cost_parameters$var_cost_2017[i]
adjustment = 1
ipc = 1
year = 2017
distance = cost_parameters$Distance[i]
compute_ta_priv(sit_zones, travel_times, travel_distances,costs, emp,
fix_cost, variable_cost, adjustment, ipc, "tapriv2017", "tapriv2017_percap", "Output/Results/",
paste0("Ta_private_dist", cost_parameters$Distance[i], "_2017.csv"), year, distance)
print(paste0("Ready Distance ", cost_parameters$Distance[i], "KM"))
}
### Project: Better or worse job accessibility? Understanding changes
#in spatial mismatch at the intra-urban level: evidence from  Medellín, Colombia
### Authors: David Bernal; Gustavo Garcia; Jorge Perez
### Code created by : David Bernal
### Last modification :
### Modified by:
#### Purpose: This code computes the private transport accessibility measure for 2017
#Required libraries
### To load and transform the data
library(readr)
library(dplyr)
library(reshape2)
### For maps
library(rgdal)
library(spdep)
## Working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
rm(list = ls())
source("TA_Private_Function.R") # Function to compute the accessibility
##############################################################################
#-------------------------------------------------------------#
#        1. Loading Data                                      #
#                                                             #
#-------------------------------------------------------------#
## ----- Loading SIT map
sit_zones = readOGR("Data/Shapefiles/SITs_2017/SITzones2017.shp", layer = "SITzones2017") #Maps for 2017
sit_zones$matrix_order = c(1:nrow(sit_zones))
## ----- Employment
emp = read_csv("Base/emp2017.csv")
emp = emp[c("k","emp")]
## ----- Travel times
travel_times = read_csv("Base/bing_travel_duration_full.csv")
travel_times = travel_times/60 #Para que quede en minutos
## ----- Distance by roads
travel_distances = read_csv("Base/bing_distances_matrix.csv")
## costs (Average wage)
costs = read_csv("Base/costs_wmin.csv")
costs = costs[c("k","wmin2017")]
#-------------------------------------------------------------#
#        2. Some Transformations                              #
#                                                             #
#-------------------------------------------------------------#
## Distance to the borders
d = read_csv("Base/mean_distance_border.csv")
div = travel_distances/travel_times
div[is.na(div)] = 0
div[!is.finite(as.matrix(div))] = 0
prom = mean(as.matrix(div))
d$time = (d$distance/1000)/prom
d$time2 = ifelse(d$time==0,mean(d$time),d$time)
for (i in 1:nrow(sit_zones)){
travel_times[i,i] = d[i,3:3]
}
#-------------------------------------------------------------#
#        3. Computing TA 2017                                 #
#                                                             #
#-------------------------------------------------------------#
## Loading cost information from regressions
cost_parameters = read_csv("Base/reg_fix_var_cost.csv")
## Computing the measure for different distances
for(i in 1:nrow(cost_parameters)){
fix_cost = cost_parameters$fix_cost_2017[i]
variable_cost = cost_parameters$var_cost_2017[i]
adjustment = 1
ipc = 1
year = 2017
distance = cost_parameters$Distance[i]
compute_ta_priv(sit_zones, travel_times, travel_distances,costs, emp,
fix_cost, variable_cost, adjustment, ipc, "tapriv2017", "tapriv2017_percap", "Output/Results/",
paste0("Ta_private_dist", cost_parameters$Distance[i], "_2017.csv"), year, distance)
print(paste0("Ready Distance ", cost_parameters$Distance[i], "KM"))
}
#### Purpose: This code computes the private transport accessibility measure for 2012
#Required libraries
### To load and transform the data
library(readr)
library(dplyr)
library(reshape2)
### For maps
library(rgdal)
library(spdep)
## Working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
rm(list = ls())
source("TA_Private_Function.R") # Function to compute the accessibility
##############################################################################
#-------------------------------------------------------------#
#        1. Loading Data                                      #
#                                                             #
#-------------------------------------------------------------#
## ----- Loading SIT map
sit_zones = readOGR("Data/Shapefiles/SITs_2017/SITzones2017.shp", layer = "SITzones2017") #Maps for 2017
sit_zones$matrix_order = c(1:nrow(sit_zones))
## ----- Employment
emp = read_csv("Base/emp2012.csv")
## ----- Travel times
travel_times = read_csv("Base/travel_times_private_2012.csv")
colnames(travel_times) = sit_zones$Name
## -----Distances through the roads
travel_distances = read_csv("Base/bing_distances_matrix.csv")
#-------------------------------------------------------------#
#        2. Some Transformations                              #
#                                                             #
#-------------------------------------------------------------#
## ----- Distance to the border
d = read_csv("Base/mean_distance_border.csv")
div = travel_distances/travel_times
div[is.na(div)] = 0
div[!is.finite(as.matrix(div))] = 0
prom = mean(as.matrix(div))
d$time = (d$distance/1000)/prom
d$time2 = ifelse(d$time==0,mean(d$time),d$time)
for (i in 1:nrow(sit_zones)){
travel_times[i,i] = d[i,3:3]
}
## Costs (Average wage)
costs = read_csv("Base/costs_wmin.csv")
costs = costs[c("k","wmin2012")]
#-------------------------------------------------------------#
#        3. Computing TA 2012                                 #
#                                                             #
#-------------------------------------------------------------#
## Loading cost information from regressions
cost_parameters = read_csv("Base/reg_fix_var_cost.csv")
## Computing the measure for different distances
for(i in 1:nrow(cost_parameters)){
fix_cost = cost_parameters$fix_cost_2012[i]
variable_cost = cost_parameters$var_cost_2012[i]
adjustment = 1
ipc = (89.08/76.27)
year = 2012
distance = cost_parameters$Distance[i]
compute_ta_priv(sit_zones, travel_times, travel_distances,costs, emp,
fix_cost, variable_cost, adjustment, ipc, "tapriv2012", "tapriv2012_percap", "Output/Results/",
paste0("Ta_private_dist", cost_parameters$Distance[i], "_2012.csv"), year, distance)
print(paste0("Ready Distance ", cost_parameters$Distance[i], "KM------------------------------------------"))
}
### Project: Better or worse job accessibility? Understanding changes
#in spatial mismatch at the intra-urban level: evidence from  Medellín, Colombia
### Authors: David Bernal; Gustavo Garcia; Jorge Perez
### Code created by : David Bernal
### Last modification :
### Modified by:
#### Purpose: This code computes the public transport accessibility measure for 2017
#Required libraries
### To load and transform the data
library(readr)
library(dplyr)
library(reshape2)
### For maps
library(rgdal)
library(spdep)
## Working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
rm(list = ls())
source("TA_Function_Public.R") # Function to compute the accessibility
##############################################################################
#-------------------------------------------------------------#
#        1. Loading Data                                      #
#                                                             #
#-------------------------------------------------------------#
## ----- Loading SIT map
sit_zones = readOGR("Data/Shapefiles/SITs_2017/SITzones2017.shp", layer = "SITzones2017") #Maps for 2017
sit_zones$matrix_order = c(1:nrow(sit_zones))
## ----- Empleo
emp = read_csv("Base/emp2017.csv")
emp = emp[c("k","emp")]
## ----- Travel times
priv_times = read_csv("Base/bing_travel_duration_full.csv")
pub_times = read_csv("Data/times_2017_w2012_v2.csv")
## Ratio between public and private (I use it to fill the gaps from Google)
rate = mean(as.matrix(pub_times), na.rm = T)/mean(as.matrix(priv_times), na.rm = T)
#-------------------------------------------------------------#
#        2. Doing some transformations                        #
#                                                             #
#-------------------------------------------------------------#
inverse_times = pub_times
inverse_times[inverse_times==0] = NA
inverse_times[!is.na(inverse_times)] = 0
inverse_times[is.na(inverse_times)] = 1
# Matrix with private times in public times empty spots
priv_times = priv_times*inverse_times
# Multiplying by the ratio
priv_times = priv_times*rate
# N/As = 0
pub_times[is.na(pub_times)] = 0
## Sum of both matrixes
travel_times = pub_times+priv_times
rm(priv_times, inverse_times, pub_times)
travel_times = travel_times/60
## ----- Roads Distances (BING)
travel_distances = read_csv("Base/bing_distances_matrix.csv")
## Costs
costs = read_csv("Base/costs_wmin.csv")
costs = costs[c("k","wmin2017")]
## ----- Distance to border
d = read_csv("Base/mean_distance_border.csv", col_types = cols(X1 = col_skip()))
div = travel_distances/travel_times
div[is.na(div)] <- 0
div[!is.finite(as.matrix(div))] <- 0
prom <- mean(as.matrix(div))
d$time = (d$distance/1000)/prom
d$time2 = ifelse(d$time==0,mean(d$time),d$time)
for (i in 1:nrow(sit_zones)){
travel_times[i,i] = d[i,3:3]
}
#-------------------------------------------------------------#
#        3. Computing TA                                      #
#                                                             #
#-------------------------------------------------------------#
### Loading data with the distances I want to compute the measure.
cost_parameters = read_csv("Base/reg_fix_var_cost.csv")
## Loop to compute the measure
for(i in 1:nrow(cost_parameters)){
cost_over_10 = 4000
cost_under_10 = 2000
adjustment = 1
ipc = 1
year = 2017
distance = cost_parameters$Distance[i]
compute_ta(sit_zones, travel_times, travel_distances, costs, emp,
cost_over_10, cost_under_10, adjustment, ipc, "tapub2017", "tapub2017_percap",
"Output/Results/", paste0("Ta_public_dist", cost_parameters$Distance[i], "_2017.csv"), year, distance)
print(paste0("Ready Distance ", cost_parameters$Distance[i], "KM!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"))
}
### Project: Better or worse job accessibility? Understanding changes
#in spatial mismatch at the intra-urban level: evidence from  Medellín, Colombia
### Authors: David Bernal; Gustavo Garcia; Jorge Perez
### Code created by : David Bernal
### Last modification :
### Modified by:
#### Purpose: This code computes the public transport accessibility measure for 2012
#Required libraries
### To load and transform the data
library(readr)
library(dplyr)
library(reshape2)
### For maps
library(rgdal)
library(spdep)
## Working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
rm(list = ls())
source("TA_Function_Public.R") # Function to compute the accessibility
##############################################################################
#-------------------------------------------------------------#
#        1. Loading Data                                      #
#                                                             #
#-------------------------------------------------------------#
## ----- Loading SIT map
sit_zones = readOGR("Data/Shapefiles/SITs_2017/SITzones2017.shp", layer = "SITzones2017") #Maps for 2017
sit_zones$matrix_order = c(1:nrow(sit_zones))
## ----- Employment
emp = read_csv("Base/emp2012.csv")
emp = emp[c("k","emp")]
## ----- Travel times
pub_times = read_csv("Base/travel_times_public_2012.csv")
travel_times = pub_times
colnames(travel_times) = sit_zones$Name
## ----- Roads Distances (BING)
travel_distances = read_csv("Base/bing_distances_matrix.csv")
#-------------------------------------------------------------#
#        2. Doing some transformations                        #
#                                                             #
#-------------------------------------------------------------#
div = travel_distances/travel_times
div[is.na(div)] <- 0
div[!is.finite(as.matrix(div))] = 0
prom <- mean(as.matrix(div))
d = read_csv("Base/mean_distance_border.csv")
d$time = (d$distance/1000)/prom
d$time2 = ifelse(d$time==0,mean(d$time),d$time)
for (i in 1:nrow(sit_zones)){
travel_times[i,i] <- d[i,3:3]
}
rm(div, prom, d, i)
## Costs (Average wage)
costs = read_csv("Base/costs_wmin.csv")
costs = costs[c("k","wmin2012")]
#-------------------------------------------------------------#
#        3. Computing TA                                      #
#                                                             #
#-------------------------------------------------------------#
### Loading data with the distances I want to compute the measure.
cost_parameters = read_csv("Base/reg_fix_var_cost.csv")
## Loop to compute the measure
for(i in 1:nrow(cost_parameters)){
cost_over_10 = 3200
cost_under_10 = 1600
adjustment = 1
ipc = (89.08/76.27)
year = 2012
distance = cost_parameters$Distance[i]
compute_ta(sit_zones, travel_times, travel_distances, costs, emp,
cost_over_10, cost_under_10, adjustment, ipc, "tapub2012", "tapub2012_percap",
"Output/Results/", paste0("Ta_public_dist", cost_parameters$Distance[i], "_2012.csv"), year, distance)
print(paste0("Ready Distance ", cost_parameters$Distance[i], "KM!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"))
}
